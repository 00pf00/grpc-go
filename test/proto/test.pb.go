/*
 *
 * Copyright 2014, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

// Code generated by protoc-gen-go.
// source: src/google.golang.org/grpc/test/proto/test.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	src/google.golang.org/grpc/test/proto/test.proto

It has these top-level messages:
	DivArgs
	DivReply
	FibArgs
	Num
	FibReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = math.Inf

type DivArgs struct {
	Dividend         *int64 `protobuf:"varint,1,req,name=dividend" json:"dividend,omitempty"`
	Divisor          *int64 `protobuf:"varint,2,req,name=divisor" json:"divisor,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DivArgs) Reset()         { *m = DivArgs{} }
func (m *DivArgs) String() string { return proto1.CompactTextString(m) }
func (*DivArgs) ProtoMessage()    {}

func (m *DivArgs) GetDividend() int64 {
	if m != nil && m.Dividend != nil {
		return *m.Dividend
	}
	return 0
}

func (m *DivArgs) GetDivisor() int64 {
	if m != nil && m.Divisor != nil {
		return *m.Divisor
	}
	return 0
}

type DivReply struct {
	Quotient         *int64 `protobuf:"varint,1,req,name=quotient" json:"quotient,omitempty"`
	Remainder        *int64 `protobuf:"varint,2,req,name=remainder" json:"remainder,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DivReply) Reset()         { *m = DivReply{} }
func (m *DivReply) String() string { return proto1.CompactTextString(m) }
func (*DivReply) ProtoMessage()    {}

func (m *DivReply) GetQuotient() int64 {
	if m != nil && m.Quotient != nil {
		return *m.Quotient
	}
	return 0
}

func (m *DivReply) GetRemainder() int64 {
	if m != nil && m.Remainder != nil {
		return *m.Remainder
	}
	return 0
}

type FibArgs struct {
	Limit            *int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FibArgs) Reset()         { *m = FibArgs{} }
func (m *FibArgs) String() string { return proto1.CompactTextString(m) }
func (*FibArgs) ProtoMessage()    {}

func (m *FibArgs) GetLimit() int64 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

type Num struct {
	Num              *int64 `protobuf:"varint,1,req,name=num" json:"num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Num) Reset()         { *m = Num{} }
func (m *Num) String() string { return proto1.CompactTextString(m) }
func (*Num) ProtoMessage()    {}

func (m *Num) GetNum() int64 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

type FibReply struct {
	Count            *int64 `protobuf:"varint,1,req,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FibReply) Reset()         { *m = FibReply{} }
func (m *FibReply) String() string { return proto1.CompactTextString(m) }
func (*FibReply) ProtoMessage()    {}

func (m *FibReply) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func init() {
}
